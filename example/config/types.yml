types:
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    # Oridnary type definitions:             #
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    my_controller:
        package: github.com/fgrosse/servo/example/endpoints
        type:    FancyController
        args:
            - @my_service_client

    my_service_client:
        package: github.com/fgrosse/servo/example/lib
        type:    ServiceClient # TODO introduce some semantic for guaranteeing an interface for defined types
        factory: NewMockServiceClient
        args:
            - "%my_app.some_parameter%"

    my_logger:
        factory: "@logger_provider::GetLogger"
        args:    [ my_app ]
        calls: # TODO implement this in goldi
            - [ SetLevel, [ 10 ] ] # 10 = LevelTrace

    my_container_aware_controller:
        package: github.com/fgrosse/servo/example/endpoints
        type:    ContainerAwareController
        args:
            - @container

    custom_error_handler:
        package: github.com/fgrosse/servo/example/lib
        type:    MyErrorHandler
        args:
            #TODO: this seems to introduce a circular dependency?! - @logger

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    # Endpoints that are used by the router: #
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    hello_world_endpoint:
        package: github.com/fgrosse/servo/example/endpoints
        func:    HelloWorldEndpoint

    greet_user_endpoint:
        package: github.com/fgrosse/servo/example/endpoints
        func:    GreetUserEndpoint

    controller_endpoint:
        func:    @my_controller::FancyAction

    error_endpoint:
        func:    @my_controller::ErrorAction

    container_aware_endpoint:
        func:    @my_container_aware_controller::SomeAction

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    # Endpoints can also be composed:        #
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    composed_endpoint:
        package: github.com/fgrosse/servo/handler
        factory: Composed
        args:
            - @my_controller::OuterHandlerAction
            - @my_controller::SecondHandlerAction
            - @my_controller::FancyAction

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    # Define our own http middleware chain   #
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    my_app.logging_adapter:
        package: github.com/fgrosse/servo/middleware
        factory: LoggingAdapter
        args:    [ @my_logger ]

    my_app.error_handler:
        package: github.com/fgrosse/servo/middleware
        factory: ErrorHandlingAdapter
        args:    [ "@custom_error_handler::HandleEndpointError" ]

    kernel.http_handler:
        package: github.com/fgrosse/servo/handler
        factory: MiddleWareAdapter
        args:
            - @servo.routing.router
            - @my_app.error_handler
            - @my_app.logging_adapter
